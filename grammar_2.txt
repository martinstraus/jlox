// The grammar,refactored for implementing precedence and eliminating ambiguity.

statement -> exprStmt | ifStmt | printStmt | whileStmt | block | forStmt;

exprStmt -> expression ";";

ifStmt -> "if" "(" expression ")" statement ("else" statement)?;

printStmt -> "print" expression ";"

whileStmt -> "while" "(" expression ")" statement;

block -> "{" declaration* "}";

forStmt -> "for" "(" (varDecl | exprStmt | ";") 
            expression? ";" 
            expression? ")"
            statement;
;

expression -> assignment;

assignment -> IDENTIFIER "=" assignment | logic_or ;

logic_or -> logic_and ("or" logic_and)*;

logic_and -> equality ("and" equality)*;

equality -> comparison (("==" | "!=") comparison)*;

comparison -> term (("<" | "<=" | ">" | ">=") term)*;

term -> factor (("-" | "+") factor)*;

factor -> unary (("/" | "*") unary)*;

unary -> ("!" | "-") unary | primary;

primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER;
