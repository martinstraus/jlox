// The grammar without any boilerplate

program -> declaration* EOF;

declaration -> varDecl | statement;

varDecl -> "var" IDENTIFIER ("=" expression)? ";";

statement -> exprStmt | printStmt;

exprStmt -> expression ";" ;

printStmt -> "print" expression ";";

expression -> literal | unary | binary | grouping;

literal -> NUMBER | STRING | "true" | "false" | "nil" | IDENTIFIER;

grouping -> "(" expression ")";

unary -> ("-" | "!") expression;

binary -> expression operator expression;

operator -> "==" | "!=" | "<" | "<=" | ">" | ">=" | "+" | "-" | "*" | "/";